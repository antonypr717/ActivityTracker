//
//  AddTaskPresenter.swift
//  ActivityTracker
//
//  Created by Antony Raphel on 06/12/18.
//  Copyright (c) 2018 Antony Raphel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddTaskPresentationLogic {
    func presentSomething(response: AddTask.Fetch.Response)
}

class AddTaskPresenter: AddTaskPresentationLogic {
    weak var viewController: AddTaskDisplayLogic?
    
    let strokeEffect: [NSAttributedString.Key: Any] = [
        NSAttributedString.Key.strikethroughStyle: NSUnderlineStyle.single.rawValue,
        NSAttributedString.Key.strikethroughColor: UIColor.black,
        ]
    
    // MARK: Do something
    
    func presentSomething(response: AddTask.Fetch.Response) {
        let taskViewModel = getTaskViewModel(response: response)
        let checkedCount = response.items.filter { $0.isChecked == true }.count
        let checkList = "(\(checkedCount)/\(response.items.count))"
        let viewModel = AddTask.Fetch.ViewModel(title: response.activity.title ?? "",
                                                checkList: checkList,
                                                items: taskViewModel)
        viewController?.displaySomething(viewModel: viewModel)
    }
    
    private func getTaskViewModel(response: AddTask.Fetch.Response) -> [AddTask.Fetch.ViewModel.ItemViewModel] {
        var items: [AddTask.Fetch.ViewModel.ItemViewModel] = []
        for element in response.items {
            let title = element.isChecked ? NSAttributedString(string: element.title ?? "", attributes: strokeEffect) : NSAttributedString(string: element.title ?? "")
            items += [AddTask.Fetch.ViewModel.ItemViewModel(index: "\(element.index).",
                title: title,
                isChecked: element.isChecked)]
        }
        return items
    }
}
