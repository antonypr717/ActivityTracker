//
//  AddTaskInteractor.swift
//  ActivityTracker
//
//  Created by Antony Raphel on 06/12/18.
//  Copyright (c) 2018 Antony Raphel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddTaskBusinessLogic {
    func save(request: AddTask.Save.Request)
    func doSomething(request: AddTask.Fetch.Request)
    func checked(request: AddTask.Checked.Request)
}

protocol AddTaskDataStore {
    var activity: ActivityEntity? { get set }
}

class AddTaskInteractor: AddTaskBusinessLogic, AddTaskDataStore {
    var presenter: AddTaskPresentationLogic?
    var activity: ActivityEntity?
    var items: [TaskEntity] = []
    
    lazy var worker = AddTaskWorker()
    
    // MARK: Do something
    
    func save(request: AddTask.Save.Request) {
        guard let aActivity = activity else { return }
        worker.saveTask(request: request, activity: aActivity) { [weak self] aItems in
            guard let strongSelf = self else { return }
            strongSelf.items = aItems
            let response = AddTask.Fetch.Response(activity: aActivity, items: aItems)
            strongSelf.presenter?.presentSomething(response: response)
        }
    }
    
    func doSomething(request: AddTask.Fetch.Request) {
        guard let aActivity = activity else { return }
        items = worker.fetchAllTask(title: aActivity.title ?? "")
        let response = AddTask.Fetch.Response(activity: aActivity, items: items)
        presenter?.presentSomething(response: response)
    }
    
    func checked(request: AddTask.Checked.Request) {
        guard let aActivity = activity else { return }
        worker.updateTask(request: request, activity: aActivity) { [weak self] (aItems) in
            guard let strongSelf = self else { return }
            strongSelf.items = aItems
            let response = AddTask.Fetch.Response(activity: aActivity, items: aItems)
            strongSelf.presenter?.presentSomething(response: response)
        }
    }
}
