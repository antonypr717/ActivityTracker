//
//  AddTaskWorker.swift
//  ActivityTracker
//
//  Created by Antony Raphel on 06/12/18.
//  Copyright (c) 2018 Antony Raphel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

class AddTaskWorker {
    func saveTask(request: AddTask.Save.Request, activity: ActivityEntity, handler: @escaping ([TaskEntity]) -> Void) {
        if let context = CoreDataManager.shared.mainContext {
            //            let fetchReq: NSFetchRequest<ActivityEntity> = ActivityEntity.fetchRequest()
            //            fetchReq.predicate = NSPredicate(format: "title = %@", request.activity.title ?? "")
            //            if let results = try? context.fetch(fetchReq) {
            //                if(results.count > 0 ) {
            //                    for activity in results {
            //                        activity.desc = request.activity.desc
            //                        activity.dueDate = request.activity.dueDate
            //                        activity.image = request.activity.image
            //                        activity.timer = request.activity.timer
            //                        activity.title = request.activity.title
            //                        activity.member = request.activity.member
            
            // add task
            let results = fetchAllTask(title: activity.title ?? "")
            if(results.count > 0) {
                let index = Int32(results.count + 1)
                let task = NSEntityDescription.insertNewObject(forEntityName: "TaskEntity", into: context) as! TaskEntity
                task.index = index
                task.title = request.title
                task.isChecked = false
                task.activityId = activity.title ?? ""
                task.activity = activity
                activity.addToTask(task)
            } else {
                addTask(request: request,
                        activity: activity,
                        context: context)
            }
            CoreDataManager.shared.saveMainContext()
            let aResults = fetchAllTask(title: activity.title ?? "")
            handler(aResults)
        }
    }
    
    func fetchAllTask(title: String) -> [TaskEntity] {
        if let context = CoreDataManager.shared.mainContext {
            let fetchReq: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
            fetchReq.predicate = NSPredicate(format: "activityId = %@", title)
            fetchReq.sortDescriptors = [NSSortDescriptor(key: "index", ascending: true)]
            if let results = try? context.fetch(fetchReq) {
                return results
            } else {
                return []
            }
        }
        return []
    }
    
    func updateTask(request: AddTask.Checked.Request, activity: ActivityEntity, handler: @escaping ([TaskEntity]) -> Void) {
        if let context = CoreDataManager.shared.mainContext {
            let fetchReq: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
            let index = request.index + 1
            fetchReq.predicate = NSPredicate(format: "index == \(index)")
            if let results = try? context.fetch(fetchReq),
                let aTask = results.first {
                aTask.isChecked = aTask.isChecked ? false : true
                CoreDataManager.shared.saveMainContext()
                let items = fetchAllTask(title: activity.title ?? "")
                handler(items)
            } else {
                handler([])
            }
        }
    }
    
    private func addTask(request: AddTask.Save.Request, activity: ActivityEntity, context: NSManagedObjectContext) {
        let task = NSEntityDescription.insertNewObject(forEntityName: "TaskEntity", into: context) as! TaskEntity
        task.index = 1
        task.title = request.title
        task.isChecked = false
        task.activityId = activity.title ?? ""
        task.activity = activity
        activity.addToTask(task)
    }
}

