//
//  AddTaskViewController.swift
//  ActivityTracker
//
//  Created by Antony Raphel on 06/12/18.
//  Copyright (c) 2018 Antony Raphel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddTaskDisplayLogic: class {
    func displaySomething(viewModel: AddTask.Fetch.ViewModel)
}

class AddTaskViewController: UIViewController, AddTaskDisplayLogic {
    var interactor: AddTaskBusinessLogic?
    var router: (NSObjectProtocol & AddTaskRoutingLogic & AddTaskDataPassing)?
    var items: [AddTask.Fetch.ViewModel.ItemViewModel] = []
    
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var tblView: UITableView!
    @IBOutlet weak var counterLabel: UILabel!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AddTaskInteractor()
        let presenter = AddTaskPresenter()
        let router = AddTaskRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    
    // MARK: Do something
    
    func doSomething() {
        let request = AddTask.Fetch.Request()
        interactor?.doSomething(request: request)
    }
    
    func saveTask(with title: String) {
        let request = AddTask.Save.Request(title: title)
        interactor?.save(request: request)
    }
    
    func displaySomething(viewModel: AddTask.Fetch.ViewModel) {
        titleLabel.text = viewModel.title
        counterLabel.text = viewModel.checkList
        items = viewModel.items
        tblView.reloadData()
    }
    
    @IBAction func didTapOnAddItem(_ sender: UITapGestureRecognizer) {
        let alertController = UIAlertController(title: "Tracker", message: "Enter the Task", preferredStyle: .alert)
        alertController.addTextField { (textField : UITextField!) -> Void in
            textField.placeholder = "Enter Task"
        }
        let saveAction = UIAlertAction(title: "Save", style: .default, handler: { [weak self] alert -> Void in
            guard let strongSelf = self else { return }
            let firstTextField = alertController.textFields![0] as UITextField
            strongSelf.saveTask(with: firstTextField.text ?? "")
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {
            (action : UIAlertAction!) -> Void in })
        alertController.addAction(saveAction)
        alertController.addAction(cancelAction)
        self.present(alertController, animated: true, completion: nil)
    }
}

extension AddTaskViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let lCell = tableView.dequeueReusableCell(withIdentifier: "AddTaskTableViewCell", for: indexPath) as! AddTaskTableViewCell
        lCell.configureCell(with: items[indexPath.row])
        return lCell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let request = AddTask.Checked.Request(index: indexPath.row)
        interactor?.checked(request: request)
    }
}
